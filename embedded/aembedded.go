// Code generated by fileb0x at "2018-10-02 10:20:28.624297664 -0700 PDT m=+0.002777539" from config file "filebox.yml" DO NOT EDIT.
// modification hash(5f130d7c89787788c0c4efa70e0c941d.47ed6a195b3bf97a9347f13bc6a836fa)

package embedded

import (
	"bytes"

	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileConfigDexterJSON is "config/dexter.json"
var FileConfigDexterJSON = []byte("\x7b\x0a\x09\x22\x50\x72\x6f\x6a\x65\x63\x74\x4e\x61\x6d\x65\x22\x3a\x20\x7b\x0a\x09\x09\x22\x54\x79\x70\x65\x22\x3a\x20\x22\x65\x6e\x76\x61\x72\x22\x2c\x0a\x09\x09\x22\x4c\x6f\x63\x61\x74\x69\x6f\x6e\x22\x3a\x20\x22\x50\x52\x4f\x4a\x45\x43\x54\x5f\x4e\x41\x4d\x45\x22\x0a\x09\x7d\x2c\x0a\x09\x22\x43\x6f\x6e\x73\x65\x6e\x73\x75\x73\x52\x65\x71\x75\x69\x72\x65\x6d\x65\x6e\x74\x73\x22\x3a\x20\x7b\x0a\x09\x09\x22\x72\x65\x76\x6f\x6b\x65\x2d\x6b\x65\x79\x22\x3a\x20\x31\x2c\x0a\x09\x09\x22\x64\x6f\x63\x6b\x65\x72\x2d\x66\x69\x6c\x65\x73\x79\x73\x74\x65\x6d\x2d\x64\x69\x66\x66\x22\x3a\x20\x31\x2c\x0a\x09\x09\x22\x6f\x73\x71\x75\x65\x72\x79\x2d\x63\x6f\x6c\x6c\x65\x63\x74\x22\x3a\x20\x31\x0a\x09\x7d\x2c\x0a\x09\x22\x4f\x53\x51\x75\x65\x72\x79\x53\x6f\x63\x6b\x65\x74\x22\x3a\x20\x22\x2f\x76\x61\x72\x2f\x6f\x73\x71\x75\x65\x72\x79\x2f\x6f\x73\x71\x75\x65\x72\x79\x2e\x65\x6d\x22\x2c\x0a\x09\x22\x53\x33\x42\x75\x63\x6b\x65\x74\x22\x3a\x20\x22\x64\x65\x78\x74\x65\x72\x2d\x62\x75\x63\x6b\x65\x74\x2d\x6e\x61\x6d\x65\x22\x2c\x0a\x09\x22\x50\x6f\x6c\x6c\x49\x6e\x74\x65\x72\x76\x61\x6c\x53\x65\x63\x6f\x6e\x64\x73\x22\x3a\x20\x31\x30\x0a\x7d\x0a")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	err = FS.Mkdir(CTX, "config/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	f, err = FS.OpenFile(CTX, "config/dexter.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileConfigDexterJSON)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
